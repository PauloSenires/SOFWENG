/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package adminui;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.sql.*;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
/**
 *
 * @author Elijah
 */
public class AdminMainMenu extends javax.swing.JFrame {

    /**
     * Creates new form AdminMainMenu
     */
    public AdminMainMenu() throws SQLException {
        this.setSize(900, 700);
        this.setResizable(false);
        Dimension size = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation((size.width - this.getSize().width) / 2, (size.height - this.getSize().height) / 2);
        JDBC();
        initializeLists();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        MainPanel = new javax.swing.JPanel();
        WelcomePanel = new javax.swing.JPanel();
        WelcomeLabel = new javax.swing.JLabel();
        TabPanel = new javax.swing.JPanel();
        tabbedPane = new javax.swing.JTabbedPane();
        ViewPendingUser = new javax.swing.JScrollPane();
        PendingUserList = new javax.swing.JList<>();
        ViewUserList = new javax.swing.JScrollPane();
        UserList = new javax.swing.JList<>();
        ViewCourseList = new javax.swing.JScrollPane();
        CourseList = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        AddClassButton = new javax.swing.JButton();
        EditViewButton = new javax.swing.JButton();
        RemoveButton = new javax.swing.JButton();
        UpdateDisplayButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        WelcomeLabel.setFont(new java.awt.Font("Century Gothic", 0, 18)); // NOI18N
        WelcomeLabel.setText("Welcome, Administrator !");

        javax.swing.GroupLayout WelcomePanelLayout = new javax.swing.GroupLayout(WelcomePanel);
        WelcomePanel.setLayout(WelcomePanelLayout);
        WelcomePanelLayout.setHorizontalGroup(
            WelcomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(WelcomePanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(WelcomeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        WelcomePanelLayout.setVerticalGroup(
            WelcomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, WelcomePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(WelcomeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        PendingUserList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = listTab1;
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ViewPendingUser.setViewportView(PendingUserList);

        tabbedPane.addTab(tab1, ViewPendingUser);

        UserList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = listTab2;
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ViewUserList.setViewportView(UserList);

        tabbedPane.addTab(tab2, ViewUserList);

        CourseList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = listTab3;
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ViewCourseList.setViewportView(CourseList);

        tabbedPane.addTab(tab3, ViewCourseList);

        javax.swing.GroupLayout TabPanelLayout = new javax.swing.GroupLayout(TabPanel);
        TabPanel.setLayout(TabPanelLayout);
        TabPanelLayout.setHorizontalGroup(
            TabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
        );
        TabPanelLayout.setVerticalGroup(
            TabPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
        );

        AddClassButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    AddClassButtonActionPerformed(evt);
                } catch (SQLException ex) {
                    Logger.getLogger(AdminMainMenu.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        EditViewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    EditViewButtonActionPerformed(evt);
                } catch (SQLException ex) {
                    Logger.getLogger(AdminMainMenu.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        RemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    RemoveButtonActionPerformed(evt);
                } catch (SQLException ex) {
                    Logger.getLogger(AdminMainMenu.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        UpdateDisplayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    UpdateDisplayButtonActionPerformed(evt);
                } catch (SQLException ex) {
                    Logger.getLogger(AdminMainMenu.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addComponent(AddClassButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(EditViewButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(UpdateDisplayButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(RemoveButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(UpdateDisplayButton, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(AddClassButton, javax.swing.GroupLayout.DEFAULT_SIZE, 20, Short.MAX_VALUE)
                    .addComponent(EditViewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(RemoveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout MainPanelLayout = new javax.swing.GroupLayout(MainPanel);
        MainPanel.setLayout(MainPanelLayout);
        MainPanelLayout.setHorizontalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(WelcomePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TabPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, MainPanelLayout.createSequentialGroup()
                        .addGap(0, 57, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        MainPanelLayout.setVerticalGroup(
            MainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainPanelLayout.createSequentialGroup()
                .addComponent(WelcomePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(TabPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        EditViewButton.setText("Edit/View");
        RemoveButton.setText("Remove");
        AddClassButton.setText("Add");
        UpdateDisplayButton.setText("Update Display");
        pack();
    }// </editor-fold>                        

    private void RemoveButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {                                             
        // TODO add your handling code here:
        if(tab1.equals(tabbedPane.getTitleAt(tabbedPane.getSelectedIndex())))
        {
            //Remove Pending
            if(PendingUserList.getSelectedIndex() < 0)
            {
                JOptionPane.showMessageDialog(null, "Please select an account first!", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else
            {
                int confirm = JOptionPane.showConfirmDialog(null, "Confirm to remove pending account?");
                if(confirm == 0)
                {
                    //Execute Update
                    String s = PendingUserList.getSelectedValue();
                    s = s.substring(4, 12);
                    System.out.println(s);
                    stat = con.createStatement();
                    stat.executeUpdate("UPDATE users SET verified = '2' WHERE ID =" + s);
                    JOptionPane.showMessageDialog(null, "Pending Account has been rejected.");
                }
            }
        }
        else if(tab2.equals(tabbedPane.getTitleAt(tabbedPane.getSelectedIndex())))
        {
            if(UserList.getSelectedIndex() < 0)
            {
                JOptionPane.showMessageDialog(null, "Please select an account first!", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else
            {
                int confirm = JOptionPane.showConfirmDialog(null, "Confirm to remove user account?");
                if(confirm == 0)
                {
                    //Execute Update
                    String s = UserList.getSelectedValue();
                    s = s.substring(4, 12);
                    System.out.println(s);
                    stat = con.createStatement();
                    stat.executeUpdate("UPDATE users SET verified = '2' WHERE ID =" + s);
                    JOptionPane.showMessageDialog(null, "User Account has been removed.");
                }
            }
        }
        else if(tab3.equals(tabbedPane.getTitleAt(tabbedPane.getSelectedIndex())))
        {
            if(CourseList.getSelectedIndex() < 0)
            {
                JOptionPane.showMessageDialog(null, "Please select a course first!", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            int confirm = JOptionPane.showConfirmDialog(null, "Confirm to remove course?");
                if(confirm == 0)
                {
                    //Execute Update
                    String s = CourseList.getSelectedValue();
                    stat = con.createStatement();
                    stat.executeUpdate("DELETE FROM classes WHERE Name = '" + s + "';");
                    JOptionPane.showMessageDialog(null, "Course has been removed.");
                }
        }
    }                                           

    private void EditViewButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {                                               
        // TODO add your handling code here:
        if(tab1.equals(tabbedPane.getTitleAt(tabbedPane.getSelectedIndex())))
        {
            JOptionPane.showMessageDialog(null, "Action unavailable for selected list");
        }
        else if(tab2.equals(tabbedPane.getTitleAt(tabbedPane.getSelectedIndex())))
        {
            //Open new JFrame form
            if(UserList.getSelectedIndex() < 0)
            {
                JOptionPane.showMessageDialog(null, "Please select an account first!", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else
            {
                String s = UserList.getSelectedValue();
                s = s.substring(4, 12);
                ID = s;
                System.out.println(ID);
                userform = new AdminUserForm();
                userform.setVisible(true);
            }
        }
        else if(tab3.equals(tabbedPane.getTitleAt(tabbedPane.getSelectedIndex())))
        {
            if(CourseList.getSelectedIndex() < 0)
            {
                JOptionPane.showMessageDialog(null, "Please select an course first!", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else
            {
                String s = CourseList.getSelectedValue();
                course = s;
                viewcourse = new AdminViewCourse();
                viewcourse.setVisible(true);
            }
        }
    }                                                    

    private void AddClassButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {                                               
        // TODO add your handling code here:
        if(tab1.equals(tabbedPane.getTitleAt(tabbedPane.getSelectedIndex())))
        {
            //View Pending Accounts
            if(PendingUserList.getSelectedIndex() < 0)
            {
                JOptionPane.showMessageDialog(null, "Please select an account first!", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else
            {
                int confirm = JOptionPane.showConfirmDialog(null, "Confirm to add pending account?");
                if(confirm == 0)
                {
                    //Execute Update
                    String s = PendingUserList.getSelectedValue();
                    s = s.substring(4, 12);
                    System.out.println(s);
                    stat = con.createStatement();
                    stat.executeUpdate("UPDATE users SET verified = '1' WHERE ID =" + s);
                    JOptionPane.showMessageDialog(null, "Pending Account has been added verified.");
                }
            }
        }
        else if(tab2.equals(tabbedPane.getTitleAt(tabbedPane.getSelectedIndex())))
        {
            JOptionPane.showMessageDialog(null, "Action unavailable for selected list");
        }
        else if(tab3.equals(tabbedPane.getTitleAt(tabbedPane.getSelectedIndex())))
        {
            courseform = new AdminAddCourseForm();
            courseform.setVisible(true);
        }
    }                                                     

    private void UpdateDisplayButtonActionPerformed(java.awt.event.ActionEvent evt) throws SQLException {                                                    
        // TODO add your handling code here:
        cleanLists();
        initializeLists();
        PendingUserList.setListData(listTab1);
        UserList.setListData(listTab2);
        CourseList.setListData(listTab3);
        PendingUserList.revalidate();
        PendingUserList.repaint();
        UserList.revalidate();
        UserList.repaint();
        CourseList.revalidate();
        CourseList.repaint();
    }                                                    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new AdminMainMenu().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(AdminMainMenu.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private void cleanLists()
    {
        listTab1 = new String[10000];
        listTab2 = new String[10000];
        listTab3 = new String[10000];
    }
    
    private void initializeLists() throws SQLException
    {
        //System.out.println(listTab1[0]);
        String temp = "";
        stat = con.createStatement();
        //Initialize list for Pending Accounts
        result = stat.executeQuery("SELECT * FROM users WHERE verified = 0");
        while(result.next())
        {
            if(temp.equals(result.getString("ID")))
            {
                break;
            }
            temp = result.getString("ID");
            temp = "ID: " + temp + ": " + result.getString("Name");
            listTab1[listindex] = temp;
            listindex++;
            temp = "";
        }
        listindex = 0;
        //Initialize list for User Accounts
        result = stat.executeQuery("SELECT * FROM users WHERE verified = 1");
        while(result.next())
        {
            if(temp.equals(result.getString("ID")))
            {
                break;
            }
            temp = result.getString("ID");
            temp = "ID: " + temp + ": " + result.getString("Name");
            listTab2[listindex] = temp;
            listindex++;
            temp = "";
        }
        listindex = 0;
        //Initialize list for Course Lists
        result = stat.executeQuery("SELECT * FROM classes");
        while(result.next())
        {
            if(temp.equals(result.getString("Name")))
            {
                break;
            }
            temp = result.getString("Name");
            listTab3[listindex] = temp;
            listindex++;
            temp = "";
        }
        listindex = 0;
    }
    
    private void JDBC() throws SQLException
    {
        url="jdbc:mysql://localhost:3306/cpe_database";
        prop = new Properties();
        prop.setProperty("user", "root");
        prop.setProperty("password", "");
        d = new com.mysql.jdbc.Driver();
        con = d.connect(url, prop);
        if(con==null)   
        {
            //System.out.println("Connection Failed");
            return;
        }
        else
        {
            //System.out.println("Connected");
        }
    }
    
    // Variables declaration - do not modify                     
    private javax.swing.JButton AddClassButton;
    private javax.swing.JList<String> CourseList;
    private javax.swing.JButton EditViewButton;
    private javax.swing.JPanel MainPanel;
    private javax.swing.JList<String> PendingUserList;
    private javax.swing.JButton RemoveButton;
    private javax.swing.JPanel TabPanel;
    private javax.swing.JButton UpdateDisplayButton;
    private javax.swing.JList<String> UserList;
    private javax.swing.JScrollPane ViewCourseList;
    private javax.swing.JScrollPane ViewPendingUser;
    private javax.swing.JScrollPane ViewUserList;
    private javax.swing.JLabel WelcomeLabel;
    private javax.swing.JPanel WelcomePanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration     
    
    //Variable declaration for mysql properties
    private String url;
    private Properties prop;
    private Driver d;
    private Connection con;
    private Statement stat;
    private ResultSet result;
    //End of variable declaration
    
    //Variable declaration for string lists
    private String[] listTab1 = new String[10000];
    private String[] listTab2 = new String[10000];
    private String[] listTab3 = new String[10000];
    private String tab1 = "View Pending Accounts";
    private String tab2 = "View User Accounts";
    private String tab3 = "View Course List";
    private int listindex = 0;
    private int numberindex;
    //End of variable declaration
    
    //Calling for other forms
    private AdminUserForm userform;
    private AdminAddCourseForm courseform;
    private AdminViewCourse viewcourse;
    public static String ID;
    public static String course;
}
